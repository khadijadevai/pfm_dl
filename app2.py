import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

# üé® Personnaliser l‚Äôarri√®re-plan avec une couleur simple
st.markdown(
    """
    <style>
    .stApp {
        background-color: #EEDDC8; /* marron b√©b√© clair */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# üì¶ Charger le mod√®le
model = load_model("mon_modele_fine_tune.h5")

# üîç Fonction de pr√©diction
def predict_single_image(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    prediction = model.predict(img_array)[0][0]
    label = "Moderne" if prediction >= 0.5 else "Historique"
    return label, prediction

# üñº Interface Streamlit
st.title(" Pr√©diction : B√¢timent Moderne ou Historique")

uploaded_file = st.file_uploader(" T√©l√©chargez une image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Afficher l‚Äôimage
    img = image.load_img(uploaded_file, target_size=(224, 224))
    st.image(img, caption="Image t√©l√©charg√©e", width=300)

    # Pr√©diction
    label, prediction = predict_single_image(uploaded_file)
    # R√©sultat : Afficher label + probabilit√© associ√©e √† cette classe
    if label == "Moderne":
        proba = prediction
    else:
        proba = 1 - prediction

    # R√©sultat : Afficher label + probabilit√©
    st.markdown(f"### Pr√©diction : **{label}**")
    st.markdown(f"Probabilit√© : **{proba:.2f}**")

    # Visualisation graphique
    fig, ax = plt.subplots()
    ax.barh(["Historique", "Moderne"], [1 - prediction, prediction], color=["#DDA853", "#183B4E"])
    ax.set_xlim(0, 1)
    ax.set_xlabel("Probabilit√©")
    ax.set_title("Probabilit√© par classe")
    st.pyplot(fig)
